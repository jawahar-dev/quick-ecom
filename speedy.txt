Overview
SpeedyMart is a quick commerce application designed for modern consumers who seek convenience and efficiency in their shopping experience. The application offers a user-friendly interface for browsing products, adding them to the cart, and completing the checkout process seamlessly.

Setup Instructions
Prerequisites
Docker
Docker Compose
Clone the Repository


git clone <repository-url>
cd speedymart
Create requirements.txt

Create a requirements.txt file with the following content:

plaintext
Copy code
Flask==1.1.4
Flask-SQLAlchemy==2.5.1
PyMySQL==1.0.2
Werkzeug==1.0.1
MarkupSafe==1.1.1
Create Dockerfile

Create a Dockerfile with the following content:

Dockerfile
Copy code
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt

COPY . .

CMD ["python3", "app.py"]
Create docker-compose.yml

Create a docker-compose.yml file with the following content:

yaml
Copy code
version: '3.8'

services:
  db:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: power2024
      MYSQL_DATABASE: intrestDB
      MYSQL_USER: root
      MYSQL_PASSWORD: power2024
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "3306:3306"

  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      FLASK_APP: app.py
      FLASK_ENV: development
      DATABASE_URL: mysql+pymysql://root:power2024@db:3306/intrestDB
    depends_on:
      - db

volumes:
  db_data:
Run the Application

Build and run the Docker containers:

sh
Copy code
docker-compose up --build
The application should now be accessible at http://localhost:5000.

API Routes
1. GET /
Description: Fetch all products and display them on the home page.

Response: HTML page with the list of products.

2. POST /add_to_cart/int:product_id
Description: Add a product to the cart.

Request Parameters:

product_id (int): The ID of the product to add to the cart.
quantity (int): The quantity of the product to add.
Response: Redirects to the home page.

3. GET /cart
Description: Display the cart with all added items and the total price.

Response: HTML page with the list of cart items and total price.

4. GET & POST /add_product
Description: Add a new product to the store.

Request Parameters (POST only):

name (str): The name of the product.
price (float): The price of the product.
stock (int): The stock quantity of the product.
description (str): The description of the product.
Response (POST): Redirects to the home page with a success message.

Response (GET): HTML page with a form to add a new product.

Running Tests
Prerequisites
Python 3.9
unittest module (comes pre-installed with Python)